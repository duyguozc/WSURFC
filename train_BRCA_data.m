% INPUT
% expressionDataDir: directory of expression data file
% clinicalSetDir: directory of clinical set file
% numberOfFeatures: number of features to select by ttest
% noOfTrees: number of trees to construct RF model
% lowQuartile: upper bound in percentage for defining a patient as low survivor
% upQurtile: lower bound in percentage for defining a patient as high survivor
%
%
% OUTPUT
% survialIndices : Indices of only low and high survivor patients in patient array
% selected_indices: Indices of features in genomic matrix by rank features
%  method
% allClinicalSet: Clinical variable set of all patients obtained from UCSC
%   data
% dataMatrix: expression matrix of all patients
% numeric_cls: numeric representation of classes. low survivor = -1,
%   high_survivor=1, none of them = 0
% overall: survival times of all patients in terms of month
% vital_status: if patient is deceased = 1, if survived = 0
% patients: TCGA barcode of all patients
% forest_brca: Random Forest model generated by training trainMatrix with
%   trainClass labels
function[survivalIndices, selected_indices, allClinicalSet, dataMatrix, numeric_cls, overall, vital_status, patients, trainMatrix, trainClass, testMatrix, testClass, trainPatients, testPatients, forest_brca] = train_BRCA_data(expressionDataDir, clinicalSetDir, numberOfFeatures, noOfTrees, lowQuartile, upQuartile)
    
    [expMatrix,patients,variableNames] = tblread(expressionDataDir,'\t');
    patients = cellstr(patients);
    variableNames = cellstr(variableNames);
    expMatrix = transpose(expMatrix);

    mainGenomSet = mat2dataset(expMatrix,'ObsNames',patients,'VarNames',variableNames);

    clinicalSet = dataset('File',clinicalSetDir);


    [allClinicalSet, numeric_cls, genomeSetAvailableClinic, overall, vital_status, patients] = quantileCalculatorPercentage(clinicalSet, mainGenomSet, lowQuartile, upQuartile);
    dataMatrix = double(genomeSetAvailableClinic);

    survivalIndices = find(numeric_cls);
    lsSurvivalMatrix = dataMatrix(survivalIndices,:);
    %omit class labels of patients with neihter long survival nor short
    %survival
    numeric_cls_ls = numeric_cls(numeric_cls ~= 0);
    patientBarcodes = patients(numeric_cls ~= 0);

    %generate test indices, 1/5 from high survivor patients, 1/5 from low
    %survivor patients
    high_surv = find(numeric_cls_ls == 1);
    low_surv  = find(numeric_cls_ls == -1);
    testNo1  = floor(size(high_surv,1)/5);
    testNo2 = floor(size(low_surv,1)/5);
    ihigh = randperm(size(high_surv,1),testNo1);
    if testNo2 < 20
        testNo2 = 20;
    end
    ilow = randperm(size(low_surv,1),testNo2);
    selecth = high_surv(ihigh);
    selectl = low_surv(ilow);
    test_indices= [selecth;selectl];

    %Select most relevant features to reduce number of features employed in
    %random forest classifier
    [selected_indices, Z] = rankfeatures(transpose(lsSurvivalMatrix), numeric_cls_ls, 'Criterion', 'ttest','NumberOfIndices',numberOfFeatures);
    filteredMatrix = lsSurvivalMatrix(:,selected_indices);
    [trainMatrix, trainClass, testMatrix, testClass] = generate_train_and_test_classes(filteredMatrix, numeric_cls_ls, test_indices);
    train_indices = setdiff(1:size(filteredMatrix,1),test_indices);
    trainPatients = patientBarcodes(train_indices);
    testPatients = patientBarcodes(test_indices);
    forest_brca = TreeBagger(noOfTrees,trainMatrix,trainClass,'Method','Classification','oobpred','on');
end

